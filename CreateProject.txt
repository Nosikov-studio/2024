1) Создаем локальную папку проекта. Например, создаем папку проекта: 16-SQLAlchemy;
2) Откроем папку. В контекстном меню (Shift+F10) выбираем "Открыть окно команд"
3) Вводим команду: 
git init
4) Убеждаемся, что в нашей папке появилась папка .git
5) Заходим в аккаунт github
6) Создаем репозиторий r16-SQLAlchemy
7) Создали. Теперь следуем подсказке в подзаголовке "create a new repository on the command line"
8) Копируем первую команду подсказки (ctrl+c): 
echo "# r16-SQLAlchemy" >> README.md
9) Вставляем из буфера обмена в командную строку 
(Alt+пробел, в появившемся меню "изхменить" > "вставить")
наш текст команды:
echo "# r16-SQLAlchemy" >> README.md
(Выполняем команду enter)
10) Убеждаемся, что в нашей локальной папке проекта появился файл README.md с текстом: "# r16-SQLAlchemy"
11) Аналогично вводим команду:
git add README.md
12) Аналогично вводим команду:
git commit -m "first commit"
13) Аналогично вводим команду:
git branch -M main
14) Аналогично вводим команду:
git remote add origin https://github.com/Nosikov-studio/r16-SQLAlchemy.git
15) Аналогично вводим команду:
git push -u origin main
16) Убеждаемся, что в нашем удаленном репозитории на Github появился файл README.md
СВЯЗЬ С РЕПОЗИТОРИЕМ УСТАНОВЛЕНА!
***********************************************************************************
ВИРТУАЛЬНАЯ СРЕДА 
17) Открываем нашу папку с проектом (16-SQLAlchemy) в VS Code
18) Terminal > New Terminal
(powershell)
19) Вводим команту в терминале (VS Code):
py -3 -m venv venv
(второе venv - название нашей виртуальной среды)
20) Убеждаемся, что появилась в нашей папке проекта новая папка с именем venv

21) Активируем виртуальное окружение командой в том же терминале(VS Code):
venv/Scripts/activate
(если не получается, тогда сначала исполняем команду: Set-ExecutionPolicy unrestricted (политика выполнения скриптов в PowerShell))

22) Убеждаемся, что приветственная строка предваряется в скобках названием нашей среды, здесь:
(venv) ... 16-SQLAlchemy>
***********************************************************************************
23) Создаем в папке проекта файл .gitignore
24) В этот файл записываем строчку(название появившейся папки):
venv
***********************************************************************************
Закрепим наши изменения
25)Вводим команду в командной строке (мы в папке проекта):
git add .
(Либо в VS Code -> Sourse Control -> Changes -> + (Stage All Changes))
26)Вводим команду в командной строке (мы в папке проекта):
git commit -m "second commit"
(Либо в VS Code -> вводим в поле commit и жмем кнопку commit)
27)Вводим команду в командной строке (мы в папке проекта):
git push 
(Либо в VS Code жмем кнопку "Sync Changes")
***********************************************************************************
--------------------------------ПОЛЕЗНАЯ ИНФА--------------------------------------
Как нам теперь проще активировать виртуальную среду(venv) при последующем входе в проект через VS Code?

--???) ОТСТУПЛЕНИЕ! НАШЕЛ ТАКУЮ ИНФУ:
Если я правильно понял, VS Code умеет сам создавать окружение. Для этого:
- открываем в VS Code папку с нашим проектом
- Ctrl + Shift + P
- вводим "Python: Create Environment"
- выбираем "venv"
- выбираем путь/версию питона либо указываем путь вручную

--) полезные команды терминалу
python --version         -номер версии интерпретатора
where python             -где установлен
pip list                 -список всех установленных пакетов
pip freeze               -сторонние пакеты, которые мы сами установили

***********************************************************************************
28) Создадим файл проекта app.py
29) В файле напечатаем инструкцию интерпритатору питона:
print("Hello, World!!!")
30) Убеждаемся, что в статусной нижней планке появилась надпись:
Select Interpreter
а также надпись:
Python 
с всплывающей подсказкой:
Select Language Mode
31) Закроем файл app.py и надписи исчезнут
32) Теперь снова откроем этот файл. Выбор интерпритатора состоялся автоматически. (3.6.2 64-bit ('Anaconda3'))
***********************************************************************************
В файле venv/pyvenv.cfg написан интерпретор версии 3.8.9

33) Изменяем интерпретатор взятый автоматически(3.6.2) на интерпретатор виртуального окружения (3.8.9)
несколько подходов...
***********************************************************************************
НАСТРОЙКА АВТОАКТИВАЦИИ ВИРТУАЛЬНОГО ОКРУЖЕНИЯ В ПРОЕКТЕ
34)Файл -> Preferences -> Settings
35)-> переходим в Workspace
36)-> ставим галочку Activate Env In Current Terminal
37) Убеждаемся, что в нашем проекте появилась папка .vscode с файлом settings.json и настройкой в нём:
"python.terminal.activateEnvInCurrentTerminal": true
***********************************************************************************
ПЕРЕНОС ПРОЕКТА


38) Выполняем команду:
pip freeze > requirements.txt
39) Убеждаемя, что в файле requirements.txt перечисленны все усьановленные нами пакеты.

40) Деактивируем виртуальное окружение:
deactivate
40) Удаляем виртуальное окружение venv:
rm .\venv\


41) Устанавливаем виртуальное окружение командой:
python -m venv venv
42) Активируем
venv/Scripts/activate
43) Устанавливаем все пакеты проекта
pip install -r .\requirements.txt
44) Проверяем...

***********************************************************************************
КАК СОЗДАТЬ ВИРТУАЛЬНОЕ ОКРУЖЕНИЕ ДЛЯ ОПРЕДЕЛЕННОЙ ВЕРСИИ ПИТОНА???

<путь до python> -m venv venv
***********************************************************************************
ПОЛЕЗНЫЙ КОНТЕНТ ПО ССЫЛКЕ:
https://www.youtube.com/watch?v=0i4SPuorMEE

***********************************************************************************
ПЕРЕМЕННЫЕ СРЕДЫ ...
https://www.youtube.com/watch?v=ZbzP6Ma2yHE

